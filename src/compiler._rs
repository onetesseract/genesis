use std::collections::HashMap;

use inkwell::{builder::Builder, context::Context, module::Module, passes::PassManager, types::BasicTypeEnum, values::{BasicValue, BasicValueEnum, FunctionValue, PointerValue}};

use crate::parser::{BinaryOp, Expr};

/// Defines the prototype (name and parameters) of a function.
#[derive(Debug)]
pub struct Prototype {
    pub name: String,
    pub args: Vec<String>,
    pub is_op: bool,
    pub prec: usize
}

/// Defines a user-defined or external function.
#[derive(Debug)]
pub struct Function {
    pub prototype: Prototype,
    pub body: Option<Expr>,
    pub is_anon: bool
}

pub(crate) struct Compiler<'a, 'ctx> {
    pub context: &'ctx Context,
    pub builder: &'a Builder<'ctx>,
    pub fmp: &'a PassManager<FunctionValue<'ctx>>,
    pub module: &'a Module<'ctx>,
    pub function: &'a Function,
    
    variables: HashMap<String, PointerValue<'ctx>>,
    fn_val_opt: Option<FunctionValue<'ctx>>,
}

impl<'a, 'ctx> Compiler<'a, 'ctx> {
    fn get_function(&self, name: &str) -> Option<FunctionValue<'ctx>> {
        return self.module.get_function(name);
    }

    fn fn_value(&self) -> FunctionValue<'ctx> {
        return self.fn_val_opt.unwrap();
    }

    fn create_entry_block_alloca(&self, name: &str, ty: BasicTypeEnum<'ctx>) -> PointerValue<'ctx> {
        let builder = self.context.create_builder();
        let entry = self.fn_value().get_first_basic_block().unwrap();
        match entry.get_first_instruction() {
            Some(instr) => builder.position_before(&instr),
            None => builder.position_at_end(entry),
        }

        builder.build_alloca(ty, name)
    }

    fn compile_expr(&mut self, expr: &Expr) -> Result<BasicValueEnum<'ctx>, String> {
        match expr {
            Expr::Variable(name) => {
                match self.variables.get(name.get().as_str()) {
                    Some(variable) => Ok(self.builder.build_load(*variable, name.get().as_str()).as_basic_value_enum()),
                    None => Err(format!("Could not find variable {}", name.get())),
                }
            },
            Expr::Declaration(_, _) => todo!(),
            Expr::Binary(l, op, r) => {
                if *op == BinaryOp::Assign {
                    let var_name = match **l {
                        Expr::Variable(v) => v,
                        _ => return Err(format!("Expected variable as LHS of assignment (got {:?}", l)),
                    };

                    let var_val = self.compile_expr(r)?;
                    let var = self.variables.get(k)
                }

                return Err(format!("Expected variable as LHS of assignment (got {:?}", l))
            },
            Expr::Number(n) => Ok(self.context.f64_type().const_float(*n).as_basic_value_enum()),
            Expr::Block(_) => todo!(),
            Expr::Call(_, _) => todo!(),
        }
    }
}